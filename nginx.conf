	location /start_wspr {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local f = io.popen("systemctl enable redpitaya_wspr.service")
                f:close()
                local f = io.popen("systemctl start redpitaya_wspr.service")
                f:close()
                ngx.say("OK")
            ';
        }

	location /stop_wspr {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local f = io.popen("systemctl stop redpitaya_wspr.service")
                f:close()
                local f = io.popen("systemctl disable redpitaya_wspr.service")
                f:close()
                ngx.say("OK")
            ';
        } 

	location /store_wspr_config {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            
            default_type application/json;
            
            content_by_lua '
                function string:split( inSplitPattern, outResults )
                 
                   if not outResults then
                      outResults = {}
                   end
                   local theStart = 1
                   local theSplitStart, theSplitEnd = string.find( self, inSplitPattern, theStart )
                   while theSplitStart do
                      table.insert( outResults, string.sub( self, theStart, theSplitStart-1 ) )
                      theStart = theSplitEnd + 1
                      theSplitStart, theSplitEnd = string.find( self, inSplitPattern, theStart )
                   end
                   table.insert( outResults, string.sub( self, theStart ) )
                   return outResults
                end
                local args = ngx.req.get_uri_args()
                local rc = args.rc or 0
                local rl = args.rl or 0
                local c = args.c or 0 
                local ppm = args.ppm or 0
                local bands = args.bands or 0
                local wlid = args.wlid or 0 
                local wlpw = args.wlpw or 0 
                os.execute("rw")
                local f = io.open("/opt/redpitaya/www/apps/sdr_wspr/wspr-vars.sh","w+")
                f:write("CALL="..rc.."\\nGRID="..rl.."\\nCOMMENT="..c.."\\nWLID="..wlid.."\\nWLPW="..wlpw.."")
                f:close()
                local f = io.open("/opt/redpitaya/www/apps/sdr_wspr/write-c2-files.cfg","w+")
                f:write(string.format("corr = %s;\\n\\n",ppm))
                f:write("bands = (\\n")
                local bands_table = bands:split("|")
                for i=1,#bands_table do
                        if i<#bands_table then
                                f:write(string.format("  { freq = %s; chan = 1; },\\n",bands_table[i]))
                        end     
                        if i==#bands_table then
                                f:write(string.format("  { freq = %s; chan = 1; }\\n",bands_table[i]))
                        end     
                end     
                f:write(");\\n")
                f:close()
                os.execute("ro")
                ngx.say("OK") 
		
		local f = io.popen("cp /opt/redpitaya/www/apps/sdr_wspr/redpitaya_wspr.service /etc/systemd/system")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';  
        } 
	
	location /read_writec2filescfg {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            add_header 'Content-type' 'text/plain; charset=utf-8';

            content_by_lua '

             	local args = ngx.req.get_uri_args()

                local handle = io.open("/opt/redpitaya/www/apps/sdr_wspr/write-c2-files.cfg", "r");
                local res = handle:read("*all");
                io.close(handle);
                ngx.say(res);
                
            ';
        }

        location /read_wspr_vars {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            add_header 'Content-type' 'text/plain; charset=utf-8';

            content_by_lua '

             	local args = ngx.req.get_uri_args()

                local handle = io.open("/opt/redpitaya/www/apps/sdr_wspr/wspr-vars.sh", "r");
                local res = handle:read("*all");
                io.close(handle);
                ngx.say(res);
                
            ';
        }
	location /get_wspr_status {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                local f = io.popen("if [ $(( `pgrep -c wspr-server`)) -eq 0 ]; then echo inactive; else echo active; fi")
                --local f = io.popen("systemctl is-active redpitaya_wspr.service")
		local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }
	location /get_wspr_decodes {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

            default_type application/json;

            content_by_lua '
                --local f = io.popen("cat /dev/shm/wspr_spots.txt  | awk \'BEGIN { FS = "[ \s+]+" } { print $2 " " $7 " " $8 " " $4 }\'")
                local f = io.popen("cat /dev/shm/wspr_spots.txt")
                local content = f:read("*all")
                f:close()
                ngx.say(content)
            ';
        }
